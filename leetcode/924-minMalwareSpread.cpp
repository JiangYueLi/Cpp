//
// Created by Y on 2024/3/15.
//
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <iostream>

using namespace std;
class Solution {
public:
    int find(int x,vector<int> &parent)
    {
        while (x!= parent[x])
        {
            x = parent[x];
        }
        return x;

    }

    void Union(int x,int y,vector<int> &parent)
    {
        int fx = find(x,parent);
        int fy = find(y,parent);
        if(fx!=fy)
        {
            parent[fx] = fy;
        }
    }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> parent(n);
        for(int i=0;i<n;i++)
        {
            parent[i] = i;
        }
        for(int i= 0;i<graph.size();i++)
        {
            for(int j=0;j<graph[0].size();j++)
            {
                if(graph[i][j] == 1)
                {
                    Union(i,j,parent);
                }
            }
        }

        unordered_map<int,int> map;
        for (int i = 0; i < n; i++) {
            int root = find(i, parent);
            map[root]++;
        }

        vector<int> infect(n);
        sort(initial.begin(),initial.end());

        for(auto &init:initial)
        {
            infect[find(init,parent)]++;
        }
        int res = initial[0];
        int mapcount = 0;
        for(int i=0;i<initial.size();i++)
        {
            int iparent = find(initial[i],parent);
            if(infect[iparent] == 1 && map[iparent]>mapcount)
            {
                mapcount = map[iparent];
                res =initial[i];
            }
        }
        return res;

    }
};